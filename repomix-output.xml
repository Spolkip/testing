This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
accordion.css
api-call.js
auth.php
buttons.css
feed.css
help.html
index.html
index.php
main.php
modal.css
modal.js
playlists.php
profile.css
profile.html
README.md
register.css
render.js
search.php
sidenav.css
src/controller.php
src/database.php
src/googleauth.php
theme.css
theme.js
view_playlist.php
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
**/vendor/
</file>

<file path="accordion.css">
.accordion-container{
  display: flex;
  align-items: center;
  justify-content: center;
  max-width: 100%;
  padding: 10px;
  margin-left: 220px;
}

.accordion-link,
.accordion-link *,
.accordion a,
.accordion a * {
  text-decoration: none !important;
}

.accordion {
  width: 50%;
  margin-top: 10%;
}

.accordion-item{
  border-radius: .4rem;
}

.accordion-link{
  font-size: 1.6rem;
  text-decoration: none;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem 0;
}

.accordion-link h3{
  color: rgba(0, 0, 0, 0.502);
  font-weight:500;
  font-size: 20px;
  transition: color 1s;
}


.accordion-link i{
  padding: .5rem;
  
}

.accordion-link ul{
  color: red;
  display:flex;
  align-items: flex-end;
  list-style-type: none;
  margin-left: 25px;
}

.accordion-link li{
  font-size: 10px;
  padding: 0 0 1px 5px;
}

body.dark .accordion-link h3 {
  color: rgba(255, 255, 255, 0.503);
  transition: color 1s;
}

.accordion-link div{
  display: flex;
}

.answer{
  max-height: 0;
  overflow: hidden;
  position: relative;
  transition: max-height 650ms;
}

.answer p{
  font-size: 15px;
  padding: 2rem;
  
}

.accordion-item:target .answer{
  max-height: 20rem;
}
</file>

<file path="api-call.js">
function callBack(element) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            this.responseText;
       }
    };
    xhttp.open("GET", "index.php/?action=" + element.getAttribute("name"), true);
    xhttp.send();
}

window.addEventListener("load", () => {
    let authButtons = document.querySelectorAll("[name *= auth-button-]"); //https://www.w3schools.com/cssref/css_selectors.php
    authButtons.forEach(function(button){
        button.addEventListener("click", function(){
            console.log(this)
            //callBack(this); //κάτσε διάβασε τι κάνει το This
        }); //σε addEventListener δεν μπορώ να βάλω παραμέτρους άρα αυτό που κάνω είναι ανοίγω ένα function
    });
})
</file>

<file path="auth.php">
<?php
require(__DIR__ . '/vendor/autoload.php');
include("./src/auth.php");

$googleAuth = new GoogleAuth();
</file>

<file path="buttons.css">
.sign-container {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  border: 2px solid red;
  height: 90px;
}

.sign-buttons {
  display: flex;
  justify-content: end;
}

.buttons{
  background-color: rgb(0, 0, 0);
  color: rgb(255, 255, 255);
  margin: 20px 20px 0 0;
  padding: 10px 15px;
  width: 50%;
  border: solid 2px white;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold!important;
  text-decoration: none;
  transition: background-color 0.3s;
  z-index: 3;
}

body:not(.dark) .buttons:not(.auth-button):hover {
  color: red;
}

body.dark .buttons:not(.auth-button):hover {
  border-color: red;
}

.help {
  margin: 20px 22px;
  text-align: right;
  z-index: 3;
}

a {
  color: red;
  font-weight: bold!important; 
  text-decoration: none;
  font-weight: 500;
}

a:hover {
  color: rgb(195, 0, 0);
}

.profile-icon {
  line-height: 0;
}

.profile-icon img{
  position: relative;
  border: 3px solid;
  vertical-align: middle;
  margin-top: 15px;
  margin-right: 15px;
  width: 50px;
  height: 50px;
  border-radius: 50%;
  z-index: 3;
}
</file>

<file path="feed.css">
.feed-container {
  width: 100%;
  max-width: calc(100vw - 220px); 
  max-height: 100vh;
  height: 100%;
  margin-left: 220px;
  overflow-y: scroll; 
  overflow-x: hidden;
  border: none;
  z-index: 2;
}

.feed {
  display: flex;
  flex-direction: column;
  border: none;
  z-index: 2;
}

.feed-item {
  width: 100%;
  height: 250px; 
  border: none;
  overflow: hidden;
  z-index: 2;
}

.feed-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
  border-top: 2px solid;   
  border-bottom: 2px solid;
  border-left: none; 
  border-right: none;
  transition: transform 0.3s;
  z-index: 2;
}
/* 
.feed-item img:hover {
  transform: scale(1.05);
  z-index: 2;
} */
</file>

<file path="help.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="sidenav.css" />
    <link rel="stylesheet" href="theme.css" />
    <link rel="stylesheet" href="buttons.css" />
    <link rel="stylesheet" href="accordion.css" />
    <script defer src="theme.js"></script>
    <script defer src="accordion.js"></script>

  </head>
  <body>
    
    <div class="mode-tog"></div>

    <div class="dark-mode-container">
      <div class="dark-mode"></div>
    </div>
    
    <nav class="sidenav">
      <a href="main.php" class="logo-link">
        <img class="logo" src="Images/logo.png" alt="logo" />
      </a>
    </nav>

    <div class="sign-container">
      <div class="sign-buttons">
        <a href="register.php" class="buttons"><span>ΕΓΓΡΑΦΗ</span></a>
        <a href="login.php" class="buttons"><span>ΕΙΔΟΣΟΣ</span></a>
    </div>
    
    <div class="help">
        ㅤ
      </div>
    </div>

    <div class="accordion-container">
      <div class="accordion">
        <div class="accordion-item" id="question1">
          <a class="accordion-link" href="#question1">
            <div class="flex">
              <h3>Πώς κάνω εγγραφή;</h3>
              <ul>
                <li>#How</li>
                <li>#To</li>
                <li>#Sign</li>
                <li>#Up?</li>
              </ul>
            </div>
            <i class="icon ion-md-arrow-forward"></i>
            <i class="icon ion-md-arrow-down"></i>
          </a>
          <div class="answer">
            <p>Πατώντας το πεδίο "ΕΓΓΡΑΦΗ" πάνω δεξιά, μπορείς να εισάγεις τα στοιχεία σου και να γίνει μέλος της διαδικτυακής κοινότητας μας!.
            </p>
          </div>
          <hr>
        </div>
        <div class="accordion-item" id="question2">
          <a class="accordion-link" href="#question2">
            <div class="flex">
              <h3>Ολοκλήρωσα την εγγραφή μου. Τώρα τι;</h3>
              <ul>
                <li>#Registration</li>
                <li>#Complete.</li>
                <li>#Now</li>
                <li>#What?</li>
              </ul>
            </div>
            <i class="icon ion-md-arrow-forward"></i>
            <i class="icon ion-md-arrow-down"></i>
          </a>
          <div class="answer">
            <p>Μπορείς </p>
          </div>
          <hr>
        </div>
        <div class="accordion-item" id="question3">
          <a class="accordion-link" href="#question3">
            <div class="flex">
              <h3>ΓΙΑΤΙ;</h3>
              <ul>
                <li>#πως</li>
                <li>#να</li>
                <li>#κάνω</li>
                <li>#εγγραφή</li>
                <li>#;</li>
              </ul>
            </div>
            <i class="icon ion-md-arrow-forward"></i>
            <i class="icon ion-md-arrow-down"></i>
          </a>
          <div class="answer">
            <p>Με την εγγραφή σου, αποκτάς τον έλεγχο του περιεχομένου που σου εμφανίζεται! Δημιούργησε τις δικές σου λίστες ροής και μοιράσου τις με άλλους χρήστες που σε εμπνέουν. Οι λίστες τους θα εμφανίζονται στο προφίλ τους για να ανακαλύπτεις συνεχώς νέο, ενδιαφέρον περιεχόμενο!
            </p>
          </div>
          <hr>
        </div>
      </div>
    </div>

  </body>
</html>
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="sidenav.css" />
    <link rel="stylesheet" href="theme.css" />
    <link rel="stylesheet" href="buttons.css" />
    <link rel="stylesheet" href="accordion.css" />
    <link rel="stylesheet" href="modal.css" />
    <script src="api-call.js"></script>
    <script defer src="theme.js"></script>
    <script src="modal.js"></script>
  </head>
  <body>
    
    <div class="try-me">Κάνε 'κλικ' στον κύκλο!</div>
    <div class="try-me-arrow">⤵</div>
    <div class="mode-tog"></div>

    <div class="dark-mode-container">
      <div class="dark-mode"></div>
    </div>
    
    <nav class="sidenav">
      <a href="index.html" class="logo-link">
        <img class="logo" src="Images/logo.png" alt="logo" />
      </a>
    </nav>

    <div class="sign-container">
      <div class="sign-buttons">
        <div data-type="register" class="auth-button-modal buttons"><span>ΕΓΓΡΑΦΗ</span></div>
        <div data-type="login" class="auth-button-modal buttons"><span>ΕΙΣΟΔΟΣ</span></div>
      </div>
    
      <div class="help">
        Χρειάζεσαι βοήθεια; Κάνε κλικ <a href="help.html">Εδώ!</a>
      </div>
    </div>

    <div class="accordion-container">
      <div class="accordion">
        <div class="accordion-item" id="question1">
          <a class="accordion-link" href="#question1">
            <div class="flex">
              <h3>ΣΚΟΠΟΣ</h3>
              <ul>
                <li>#Figma</li>
                <li>#Sketch</li>
                <li>#Adobe</li>
                <li>#Invision</li>
                <li>#Protopie</li>
              </ul>
            </div>
            <i class="icon ion-md-arrow-forward"></i>
            <i class="icon ion-md-arrow-down"></i>
          </a>
          <div class="answer">
            <p>Ο ιστοτόπος έχει σκοπό την παρουσίαση μια διαδικτυακής σελίδας αναπαραγωγής περιεχομένου ροής, αξιοποιώντας τεχνολογίες διαδικτύου, συμπεριλαμβανομένων html, css, javascript, php, xml & REST api, και μια σχεσιακή βάση δεδομένων mysql.
            </p>
          </div>
          <hr>
        </div>
        <div class="accordion-item" id="question2">
          <a class="accordion-link" href="#question2">
            <div class="flex">
              <h3>ΕΓΓΡΑΦΗ</h3>
              <ul>
                <li>#Figma</li>
                <li>#Sketch</li>
                <li>#Adobe</li>
                <li>#Invision</li>
                <li>#Protopie</li>
              </ul>
            </div>
            <i class="icon ion-md-arrow-forward"></i>
            <i class="icon ion-md-arrow-down"></i>
          </a>
          <div class="answer">
            <p>Η εγγραφή γίνεται εύκολα μέσω της φόρμας εγγραφής, πατώντας στο πεδίο "ΕΓΓΡΑΦΗ" στο πάνω δεξιά μέρος της σελίδας.</p>
          </div>
          <hr>
        </div>
        <div class="accordion-item" id="question3">
          <a class="accordion-link" href="#question3">
            <div class="flex">
              <h3>ΓΙΑΤΙ;</h3>
              <ul>
                <li>#πως</li>
                <li>#να</li>
                <li>#κάνω</li>
                <li>#εγγραφή</li>
                <li>#;</li>
              </ul>
            </div>
          </a>
          <div class="answer">
            <p>Με την εγγραφή σου, αποκτάς τον έλεγχο του περιεχομένου που σου εμφανίζεται! Δημιούργησε τις δικές σου λίστες ροής και μοιράσου τις με άλλους χρήστες που σε εμπνέουν. Οι λίστες τους θα εμφανίζονται στο προφίλ τους για να ανακαλύπτεις συνεχώς νέο, ενδιαφέρον περιεχόμενο!
            </p>
          </div>
          <hr>
        </div>
      </div>
    </div>

    <div id="loginModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <form id="loginForm" class="register-form" method="post">
          <div class="label-input">
            <label for="username">ΟΝΟΜΑ ΧΡΗΣΤΗ</label>
            <input type="text" name="username" required>
          </div>
          <div class="label-input">
            <label for="password">ΚΩΔΙΚΟΣ</label>
            <input type="password" name="password" required>
          </div>
          <div>
            <input type="checkbox" id="remember-me" name="remember-me" value="0">
            <label for="remember-me">Να με θυμάσαι</label>
          </div>
          <div class="buttons auth-button"><span>ΕΙΣΟΔΟΣ</span></div>
          <div id="login-a">
            Ξέχασες τον <a href="#">κωδικό</a> σου;
          </div>
          <div class="error-messagebox" style="color:red; font-weight:bold; text-align:center; margin-top:10px;">
              &nbsp;
          </div>
          </div>
        </form>
      </div>
    </div>

    <div id="registerModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <form id="registerForm" class="register-form" method="post">
          <div class="label-input">
            <label for="firstname">ΟΝΟΜΑ</label>
            <input type="text" name="firstname" required>
          </div>
          <div class="label-input">
            <label for="lastname">ΕΠΩΝΥΜΟ</label>
            <input type="text" name="lastname" required>
          </div>
          <div class="label-input">
            <label for="username">ΟΝΟΜΑ ΧΡΗΣΤΗ</label>
            <input type="text" name="username" required>
          </div>
          <div class="label-input">
            <label for="email">EMAIL</label>
            <input type="email" name="email" required>
          </div>
          <div class="label-input">
            <label for="password">ΚΩΔΙΚΟΣ</label>
            <input type="password" name="password" required>
          </div>
          <div class="buttons auth-button"><span>ΕΓΓΡΑΦΗ</span></div>
          <div class="error-messagebox" style="color:red; font-weight:bold; text-align:center; margin-top:10px;">
            &nbsp;
          </div>
        </form>
      </div>
    </div>
  </body>
</html>
</file>

<file path="index.php">
<?php
session_start();  // <-- MUST be first line

include("./src/controller.php"); // Σκέτη / σε path είναι το root path του σέρβερ 
include("./src/database.php");

if ($_SERVER['REQUEST_METHOD'] == 'GET') {
    $action = htmlspecialchars($_GET['action']); // htmlspecialchars μετατρέπει ό,τι βάλει ο χρήστης ως String για να μην εκτελλεί κακόβουλο input
    $action = str_replace('auth-button-', '', $action);
} elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $action = htmlspecialchars($_POST['action']);
}

try {
    $controller = new Controller($conn);
    $controller->setRequestMethod($_SERVER['REQUEST_METHOD']);
    $response = $controller->$action();
    echo json_encode($response);
} catch(Exception $e) {
//     http_response_code(500);
//     echo json_encode($e->getMessage());
    http_response_code(400); // use 400 for validation errors
    echo json_encode(["error" => $e->getMessage()]);
}
exit;
</file>

<file path="main.php">
<?php
session_start();
if (!isset($_SESSION['user_id'])) {
    header('Location: index.html');
    exit();
}
include("./src/database.php");
include("./src/controller.php");
$controller = new Controller($conn);
$search_results = $controller->searchPlaylists(); // Changed to use the search function
?>
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Κεντρική Σελίδα</title>
    <link rel="stylesheet" href="sidenav.css" />
    <link rel="stylesheet" href="theme.css" />
    <link rel="stylesheet" href="buttons.css" />
    <link rel="stylesheet" href="modal.css" />
    <link rel="stylesheet" href="feed.css" />
    <link rel="stylesheet" href="profile.css" />
    <script src="theme.js"></script>
    <script src="modal.js"></script>
    <script src="render.js"></script>
  </head>
  <body>
    
    <div class="mode-tog"></div>
    <div class="dark-mode-container"><div class="dark-mode"></div></div>
    
    <nav class="sidenav">
      <a href="main.php" class="logo-link"><img class="logo" src="Images/logo.png" alt="logo" /></a>
      <a href="playlists.php" class="logout-button"><span>Οι Λίστες μου</span></a>
      <a href="#" id="logout-btn" class="logout-button"><span>ΑΠΟΣΥΝΔΕΣΗ</span></a>
    </nav>

    <div class="sign-container">
      <a href="#" class="profile-icon"><img src="Images/user-icon.png" alt="User Icon"></a>
    </div>

    <main id="content" class="profile-container">
        <header class="profile-header">
            <h1>Λίστες Περιεχομένου</h1>
        </header>

        <section class="search-section">
            <form action="main.php" method="GET" class="search-form">
                <div class="form-row">
                    <input type="text" name="search_text" placeholder="Αναζήτηση σε τίτλους..." value="<?php echo htmlspecialchars($search_results['search_params']['search_text']); ?>">
                    <input type="text" name="user_query" placeholder="Αναζήτηση χρήστη..." value="<?php echo htmlspecialchars($search_results['search_params']['user_query']); ?>">
                </div>
                <div class="form-row">
                    <label>Ημερομηνία από:</label>
                    <input type="date" name="date_from" value="<?php echo htmlspecialchars($search_results['search_params']['date_from']); ?>">
                    <label>έως:</label>
                    <input type="date" name="date_to" value="<?php echo htmlspecialchars($search_results['search_params']['date_to']); ?>">
                </div>
                 <div class="form-row">
                    <label>Αποτελέσματα ανά σελίδα:</label>
                    <select name="results_per_page">
                        <option value="10" <?php if ($search_results['results_per_page'] == 10) echo 'selected'; ?>>10</option>
                        <option value="25" <?php if ($search_results['results_per_page'] == 25) echo 'selected'; ?>>25</option>
                    </select>
                    <button type="submit" class="buttons">Αναζήτηση</button>
                </div>
            </form>
        </section>

        <section class="results-section">
            <h2>Αποτελέσματα (<?php echo $search_results['total_results']; ?>)</h2>
            <div class="playlists-grid">
                <?php if (empty($search_results['playlists'])): ?>
                    <p>Δεν βρέθηκαν λίστες. Δοκιμάστε μια διαφορετική αναζήτηση ή δημιουργήστε μια νέα!</p>
                <?php else: ?>
                    <?php foreach ($search_results['playlists'] as $playlist): ?>
                        <a href="view_playlist.php?id=<?php echo $playlist['id']; ?>" class="playlist-card">
                            <h3><?php echo htmlspecialchars($playlist['name']); ?></h3>
                            <p>από <?php echo htmlspecialchars($playlist['username']); ?></p>
                        </a>
                    <?php endforeach; ?>
                <?php endif; ?>
            </div>

            <?php if ($search_results['total_pages'] > 1): ?>
                <div class="pagination-controls">
                    <?php
                        $query_params = $search_results['search_params'];
                        $query_params['results_per_page'] = $search_results['results_per_page'];
                    ?>
                    <?php if ($search_results['page'] > 1): ?>
                        <a href="?page=<?php echo $search_results['page'] - 1; ?>&<?php echo http_build_query($query_params); ?>" class="buttons">Προηγούμενη</a>
                    <?php endif; ?>

                    <span>Σελίδα <?php echo $search_results['page']; ?> από <?php echo $search_results['total_pages']; ?></span>

                    <?php if ($search_results['page'] < $search_results['total_pages']): ?>
                        <a href="?page=<?php echo $search_results['page'] + 1; ?>&<?php echo http_build_query($query_params); ?>" class="buttons">Επόμενη</a>
                    <?php endif; ?>
                </div>
            <?php endif; ?>
        </section>
    </main>
    
  </body>
</html>
</file>

<file path="modal.css">
.modal {
  display: none; 
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.6);
  justify-content: center;
  align-items: center;
}

.modal.active {
  display: flex;
}

.modal-content {
  color: black;
  background: #fff;
  padding: 2rem;
  border-radius: 12px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin-left: 220px;
  max-height: 600px;
  height: 50;
  max-width: 400px;
  width: 100%;
  box-shadow: 0 8px 20px rgba(0,0,0,0.3);
  position: relative;
  animation: fadeIn 0.3s ease-in-out;
}

@keyframes fadeIn {
  from {opacity: 0; transform: translateY(-20px);}
  to {opacity: 1; transform: translateY(0);}
}

.register-form {
  display: flex;
  flex-direction: column;
  width: 80%;
  gap: 1rem;
}

.label-input {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  font-weight: 500;
}

input[type="text"],
input[type="password"],
input[type="email"] {
  all: unset;
  padding: 10px;
  font-size: 16px;
  outline: 1px solid black;
  border-radius: 5px;
}

input[type="text"]:focus,
input[type="password"]:focus,
input[type="email"]:focus {
  outline: 2px solid black;
}

.auth-button {
  display: flex;
  justify-content: center;
  align-items: center;
  color: white;
  background-color: red;
  width: 100%;
  padding: 10px;
  border-radius: 5px;
  cursor: pointer;
  font-weight: 500;
  text-align: center;
}

.auth-button:hover {
  background-color: rgb(195, 0, 0);
}

input[type="checkbox"] {
  accent-color: red;
}

#login-a {
  align-self: center;
  text-align: center;
  margin-top: 10px;
}

.close {
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 1.5rem;
  cursor: pointer;
}

@media (max-width: 500px) {
  .modal-content {
    margin-left: 0;
    width: 90%;
    height: auto;
    padding: 1.5rem;
  }
}
</file>

<file path="modal.js">
document.addEventListener("DOMContentLoaded", () => {
  const authBtns = document.querySelectorAll(".auth-button-modal");
  const closeBtns = document.querySelectorAll(".modal .close");
  const rememberMeButton = document.getElementById('remember-me');
  const submitButtons = document.querySelectorAll(".modal .auth-button");
  let isSubmitting = false;
  let modal;
  let buttonType;

  // Open modal
  Array.prototype.forEach.call(authBtns, function(button) {
    button.addEventListener("click", () => {
      buttonType = button.getAttribute('data-type');
      if (buttonType == 'login') {
        modal = document.getElementById('loginModal');
      } else if (buttonType == 'register') {
        modal = document.getElementById('registerModal');
      } else if (buttonType == 'edit') {
        modal = document.getElementById('editModal');
        fetch("index.php?action=getUser")
        .then(response => response.json())
        .then(data => {
          const form = modal.querySelector('form');
          form.firstname.value = data.first_name;
          form.lastname.value = data.last_name;
          form.username.value = data.username;
          form.email.value = data.email;
          form.password.value = ""; // leave empty for security
        })
        .catch(err => {
          console.error("Error fetching user data", err);
        });
      }

      // Reset form and error message
      const form = modal.querySelector('form');
      form.reset();
      const messageBox = form.querySelector('.error-messagebox');
      if (messageBox) messageBox.innerHTML = "&nbsp;";

      // Reset input borders
      form.querySelectorAll("input").forEach(i => i.classList.remove("error"));

      modal.style.display = "flex";
    });
  });

  closeBtns.forEach(btn => {
    btn.addEventListener("click", () => {
      btn.closest(".modal").style.display = "none";
    });
  });

  window.addEventListener("click", (event) => {
    if (modal && event.target === modal) {
      modal.style.display = "none";
    }
  });

  if (rememberMeButton) {
    rememberMeButton.addEventListener('click', function() {
      this.value = this.checked ? 1 : 0;
    });
  }

  if (submitButtons) {
    Array.prototype.forEach.call(submitButtons, function(button) {
      button.addEventListener('click', async () => {
        if (isSubmitting) return;
        isSubmitting = true;

        const form = document.getElementById(buttonType + 'Form');
        const messageBox = form.querySelector('.error-messagebox');

        if (messageBox) messageBox.innerHTML = "&nbsp;";
        form.querySelectorAll("input").forEach(i => i.classList.remove("error"));

        const data = new FormData(form);
        data.append("action", buttonType);

        try {
          const response = await fetch("index.php", { method: "POST", body: data });
          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.error || "Κάτι πήγε στραβά!");
          }

          const messageBox = form.querySelector('.error-messagebox');

          if (buttonType === "register") {
            // Εμφάνιση μηνύματος επιτυχίας για εγγραφή
            if (messageBox) {
              messageBox.style.color = "green";  // <-- change text to green
              messageBox.innerHTML = "Επιτυχής εγγραφή! Μπορείς τώρα να συνδεθείς.";
            }
          } else if (result.redirect) {
            window.location.href = result.redirect;
          } else if (result.closeModal) {
            form.closest(".modal").style.display = "none";
            form.reset();
          }
        } catch (error) {
          // Highlight inputs and show error
          form.querySelectorAll("input[required]").forEach(i => i.classList.add("error"));
          if (messageBox) {
            messageBox.style.color = "red"; // ensure error is red
            messageBox.innerHTML = error.message;
          }
        } finally {
          isSubmitting = false;
        }
      });
    });
  }
});
</file>

<file path="playlists.php">
<?php
session_start();
if (!isset($_SESSION['user_id'])) {
    header('Location: index.html');
    exit();
}
include("./src/database.php");
include("./src/controller.php");

$controller = new Controller($conn);
$message = '';
$message_type = 'success';

// Χειρισμός υποβολής φόρμας για δημιουργία λίστας ή προσθήκη βίντεο
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])) {
    try {
        // Καλούμε τη σωστή μέθοδο του controller ανάλογα με την ενέργεια
        $action = $_POST['action'];
        if (method_exists($controller, $action)) {
            $response = $controller->$action();
            $message = $response['message'];
        }
    } catch (Exception $e) {
        $message = $e->getMessage();
        $message_type = 'error';
    }
}

// Ανάκτηση δεδομένων για εμφάνιση
$my_playlists = $controller->getMyPlaylists();
$feed_playlists = $controller->getFeedPlaylists();
?>
<!DOCTYPE html>
<html lang="el">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Διαχείριση Λιστών</title>
    <link rel="stylesheet" href="sidenav.css" />
    <link rel="stylesheet" href="theme.css" />
    <link rel="stylesheet" href="buttons.css" />
    <link rel="stylesheet" href="modal.css" />
    <link rel="stylesheet" href="profile.css" />
    <script src="theme.js"></script>
  </head>
  <body>
    
    <div class="mode-tog"></div>
    <div class="dark-mode-container"><div class="dark-mode"></div></div>
    
    <nav class="sidenav">
      <a href="main.php" class="logo-link">
        <img class="logo" src="Images/logo.png" alt="logo" />
      </a>
      <a href="playlists.php" class="logout-button"><span>Οι Λίστες μου</span></a>
      <a href="#" id="logout-btn" class="logout-button"><span>ΑΠΟΣΥΝΔΕΣΗ</span></a>
    </nav>

    <main class="profile-container">
        <header class="profile-header">
            <h1>Διαχείριση Λιστών</h1>
        </header>

        <?php if ($message): ?>
            <div class="message-box <?php echo $message_type; ?>"><?php echo htmlspecialchars($message); ?></div>
        <?php endif; ?>

        <section class="user-details">
            <h2>Δημιουργία Νέας Λίστας</h2>
            <form action="playlists.php" method="POST" class="playlist-form">
                <input type="hidden" name="action" value="createPlaylist">
                <div class="label-input">
                    <label for="playlist_name">Όνομα Λίστας:</label>
                    <input type="text" id="playlist_name" name="playlist_name" required>
                </div>
                <button type="submit" class="buttons">Δημιουργία</button>
            </form>
        </section>

        <section class="user-details">
            <h2>Προσθήκη Βίντεο σε Λίστα</h2>
            <form action="playlists.php" method="POST" class="playlist-form">
                <input type="hidden" name="action" value="addVideoToPlaylist">
                 <div class="label-input">
                    <label for="playlist_id">Επιλογή Λίστας:</label>
                    <select id="playlist_id" name="playlist_id" required>
                        <option value="">-- Οι λίστες μου --</option>
                        <?php foreach ($my_playlists as $playlist): ?>
                            <option value="<?php echo $playlist['id']; ?>"><?php echo htmlspecialchars($playlist['name']); ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="label-input">
                    <label for="video_title">Τίτλος Βίντεο:</label>
                    <input type="text" id="video_title" name="video_title" required>
                </div>
                <div class="label-input">
                    <label for="video_url">YouTube URL:</label>
                    <input type="url" id="video_url" name="video_url" required placeholder="https://www.youtube.com/watch?v=...">
                </div>
                <button type="submit" class="buttons">Προσθήκη</button>
            </form>
        </section>

        <section class="user-feeds">
            <h2>Οι Λίστες στο Feed μου</h2>
            <div class="playlists-grid">
                <?php if (empty($feed_playlists)): ?>
                    <p>Δεν υπάρχουν λίστες για προβολή.</p>
                <?php else: ?>
                    <?php foreach ($feed_playlists as $playlist): ?>
                        <a href="view_playlist.php?id=<?php echo $playlist['id']; ?>" class="playlist-card">
                            <h3><?php echo htmlspecialchars($playlist['name']); ?></h3>
                            <p>από <?php echo htmlspecialchars($playlist['username']); ?></p>
                        </a>
                    <?php endforeach; ?>
                <?php endif; ?>
            </div>
        </section>
    </main>

  </body>
</html>
</file>

<file path="profile.css">
.profile-container {
    margin-left: 220px;
    padding: 40px;
    max-width: calc(100% - 220px);
    height: 100vh;
    overflow-y: auto;
    z-index: 2;
    position: relative;
}

.profile-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 40px;
    border-bottom: 1px solid #ccc;
    padding-bottom: 20px;
}

body.dark .profile-header {
    border-bottom-color: #555;
}

.profile-header h1 {
    font-size: 2.5rem;
    font-weight: 500;
}

.profile-header .buttons {
    width: auto;
    padding: 10px 20px;
}

.user-details, .user-feeds {
    margin-bottom: 40px;
}

.user-details h2, .user-feeds h2 {
    font-size: 1.8rem;
    font-weight: 400;
    margin-bottom: 20px;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
}

body.dark .user-details h2, body.dark .user-feeds h2 {
    border-bottom-color: #333;
}

.detail-item {
    display: flex;
    font-size: 1.1rem;
    padding: 15px 0;
    border-bottom: 1px solid #f0f0f0;
}

body.dark .detail-item {
    border-bottom-color: #2a2a2a;
}

.detail-item:last-child {
    border-bottom: none;
}

.detail-label {
    font-weight: 500;
    width: 150px;
    color: #555;
}

body.dark .detail-label {
    color: #aaa;
}

.feed-placeholder {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 200px;
    border: 2px dashed #ccc;
    border-radius: 8px;
    color: #888;
}

body.dark .feed-placeholder {
    border-color: #555;
    color: #777;
}

/* For playlists.php forms */
.playlist-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 500px;
}

.playlist-form .buttons {
    width: fit-content;
}

.playlist-form select {
    all: unset;
    padding: 10px;
    font-size: 16px;
    outline: 1px solid black;
    border-radius: 5px;
    background-color: transparent;
    cursor: pointer;
}

body.dark .playlist-form select {
    outline-color: white;
}

/* For success/error messages */
.message-box {
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 8px;
    font-weight: 500;
}
.message-box.success {
    background-color: #e6ffed;
    border: 1px solid #b7e8c8;
    color: #2b6d45;
}
.message-box.error {
    background-color: #ffeded;
    border: 1px solid #e8b7b7;
    color: #9d2323;
}
body.dark .message-box.success {
    background-color: #1a3c26;
    border-color: #2b6d45;
    color: #b7e8c8;
}
body.dark .message-box.error {
    background-color: #3c1a1a;
    border-color: #6d2b2b;
    color: #e8b7b7;
}

.playlists-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
}

.playlist-card {
    background-color: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #eee;
    text-decoration: none;
    color: inherit;
    transition: transform 0.2s, box-shadow 0.2s;
}

.playlist-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.08);
}

body.dark .playlist-card {
    background-color: #1a1a1a;
    border-color: #333;
}

.playlist-card h3 {
    margin-bottom: 10px;
    font-size: 1.2rem;
}
.playlist-card p {
    font-size: 0.9rem;
    color: #666;
}
body.dark .playlist-card p {
    color: #999;
}


/* For view_playlist.php */
.playlist-player-section {
    display: flex;
    justify-content: center;
    margin-bottom: 40px;
}

.playlist-player-section > div {
    width: 100%;
    max-width: 854px; /* 16:9 aspect ratio for 480p height */
    aspect-ratio: 16 / 9;
}

.video-list {
    list-style: none;
    padding: 0;
}

.video-list li {
    padding: 15px;
    border-bottom: 1px solid #f0f0f0;
    cursor: pointer;
    transition: background-color 0.2s;
    display: flex;
    flex-direction: column;
}

.video-list li:hover {
    background-color: #f9f9f9;
}

body.dark .video-list li {
    border-bottom-color: #2a2a2a;
}
body.dark .video-list li:hover {
    background-color: #1a1a1a;
}

.video-list li strong {
    display: block;
    font-size: 1.1rem;
    margin-bottom: 5px;
}

.video-list li small {
    color: #777;
    font-size: 0.85rem;
}

body.dark .video-list li small {
    color: #999;
}


@media (max-width: 768px) {
    .profile-container {
        margin-left: 0;
        max-width: 100%;
        padding: 20px;
    }
    .profile-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }
}
</file>

<file path="profile.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="sidenav.css" />
    <link rel="stylesheet" href="theme.css" />
    <link rel="stylesheet" href="buttons.css" />
    <link rel="stylesheet" href="modal.css" />
    <link rel="stylesheet" href="profile.css" />
    <script src="theme.js"></script>
    <script src="modal.js"></script>
  </head>
  <body>
    
    <div class="mode-tog"></div>

    <div class="dark-mode-container">
      <div class="dark-mode"></div>
    </div>
    
    <nav class="sidenav">
      <a href="main.php" class="logo-link">
        <img class="logo" src="Images/logo.png" alt="logo" />
      </a>
      <a href="#" id="logout-btn" class="logout-button"><span>ΑΠΟΣΥΝΔΕΣΗ</span></a>
    </nav>

    <main class="profile-container">
        <header class="profile-header">
            <h1>User Profile</h1>
            <div class="buttons auth-button-modal" data-type="edit"><span>Edit Profile</span></div>
        </header>

        <section class="user-details">
            <h2>Details</h2>
            <div class="detail-item">
                <span class="detail-label">First Name:</span>
                <span id="first-name"></span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Last Name:</span>
                <span id="last-name"></span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Username:</span>
                <span id="username"></span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Email:</span>
                <span id="email"></span>
            </div>
        </section>

        <section class="user-feeds">
            <h2>My Feeds</h2>
            <div class="feed-placeholder">
                <p>Feed content will be displayed here.</p>
            </div>
        </section>
    </main>

    <div id="editModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <form id="editForm" class="register-form" method="post">
          <div class="label-input">
            <label for="firstname">ΟΝΟΜΑ</label>
            <input type="text" name="firstname" required>
          </div>
          <div class="label-input">
            <label for="lastname">ΕΠΩΝΥΜΟ</label>
            <input type="text" name="lastname" required>
          </div>
          <div class="label-input">
            <label for="username">ΟΝΟΜΑ ΧΡΗΣΤΗ</label>
            <input type="text" name="username" required>
          </div>
          <div class="label-input">
            <label for="email">EMAIL</label>
            <input type="email" name="email" required>
          </div>
          <div class="label-input">
            <label for="password">ΚΩΔΙΚΟΣ</label>
            <input type="password" name="password" required>
          </div>
          <div class="buttons auth-button"><span>ΑΝΑΝΕΩΣΗ</span></div>
          <div class="error-messagebox" style="color:red; font-weight:bold; text-align:center; margin-top:10px;">
            &nbsp;
          </div>
        </form>
      </div>
    </div>

  </body>
</html>
</file>

<file path="README.md">
# TexnologiesDiadiktiou
Εργασία για το μάθημα "Τεχνολογίες Διαδικτύου 2025"
</file>

<file path="register.css">
.wrapper-main { 
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  max-width: 100%;
  margin-left: 220px;
}

.register-form {
    width: 500px;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 3rem;
    padding: 3rem;
}

label {
    margin-bottom: -30px;
    color: rgba(0, 0, 0, 0.502);
    font-weight: 500;
    font-size: 20px;
    transition: color 1s;
}

body.dark label {
  color: rgba(255, 255, 255, 0.503);
  transition: color 1s;
}

input {
    font-size: 16px;
    width: 100%;
    background-color: rgba(240, 248, 255, 0);
    border: 0px;
    border-bottom: 1px solid;
    transition: color 1s, border-bottom-color 1s;
}

body.dark input {
    color: white;
    border-bottom: 1px solid rgb(255, 255, 255);
    transition: color 1s, border-bottom-color 1s;
}

input:focus {
    outline: none;
    border-bottom: 2px solid;
}

body.dark input:focus {
    border-bottom: 2px solid white;
}

#submit-button {
    margin-left: 5%;
    scale: 1.3;
}
</file>

<file path="render.js">
// render.js
document.addEventListener("DOMContentLoaded", () => {

    const profileIconLink = document.querySelector('a.profile-icon');
    const contentContainer = document.getElementById('content');

    // Handles fetching and injecting the profile page content
    function loadProfilePage() {
        if (!contentContainer) {
            console.error('Content container element not found.');
            return;
        }

        fetch('profile.html')
            .then(response => {
                if (!response.ok) throw new Error('Failed to load profile.html');
                return response.text();
            })
            .then(html => {
                const parser = new DOMParser();
                const profileDocument = parser.parseFromString(html, 'text/html');
                const profileMainContent = profileDocument.querySelector('main.profile-container');
                const editModalContent = profileDocument.getElementById('editModal');
                
                if (profileMainContent) {
                    contentContainer.className = 'profile-container';
                    contentContainer.innerHTML = profileMainContent.innerHTML;
                    
                    // If the edit modal isn't already in the main document, add it.
                    if (editModalContent && !document.getElementById('editModal')) {
                        document.body.appendChild(editModalContent);
                    }

                    fetchAndDisplayUserData();
                    initializeProfileInteractivity(); // Set up listeners for the new content
                } else {
                    console.error('<main class="profile-container"> not found in profile.html');
                }
            })
            .catch(error => {
                console.error('Error loading profile page:', error);
            });
    }

    // Handles fetching user data from the server and updating the DOM
    function fetchAndDisplayUserData() {
        fetch("index.php?action=getUser")
            .then(response => {
                if (!response.ok) {
                    window.location.href = 'index.html';
                    throw new Error("User not logged in or session expired.");
                }
                return response.json();
            })
            .then(data => {
                document.getElementById("first-name").textContent = data.first_name;
                document.getElementById("last-name").textContent = data.last_name;
                document.getElementById("username").textContent = data.username;
                document.getElementById("email").textContent = data.email;
            })
            .catch(err => {
                console.error("Error fetching user data:", err);
            });
    }

    // Sets up event listeners for the dynamically loaded profile page content
    function initializeProfileInteractivity() {
        const editButton = document.querySelector('.auth-button-modal[data-type="edit"]');
        const editModal = document.getElementById('editModal');
        
        if (!editButton || !editModal) {
            console.error('Edit button or modal not found on the page.');
            return;
        }

        const closeButton = editModal.querySelector('.close');
        const form = editModal.querySelector('form');
        const submitButton = form.querySelector('.auth-button');
        const messageBox = form.querySelector('.error-messagebox');
        let isSubmitting = false;

        // Open the modal and pre-fill with user data
        editButton.addEventListener('click', () => {
            fetch("index.php?action=getUser")
                .then(response => response.json())
                .then(data => {
                    form.firstname.value = data.first_name;
                    form.lastname.value = data.last_name;
                    form.username.value = data.username;
                    form.email.value = data.email;
                    form.password.value = ""; // leave empty for security
                })
                .catch(err => console.error("Error fetching user data", err));
            
            messageBox.innerHTML = "&nbsp;"; // Clear previous messages
            editModal.style.display = 'flex';
        });

        // Close the modal
        closeButton.addEventListener('click', () => {
            editModal.style.display = 'none';
        });

        window.addEventListener("click", (event) => {
            if (event.target === editModal) {
                editModal.style.display = "none";
            }
        });

        // Handle form submission
        submitButton.addEventListener('click', async () => {
            if (isSubmitting) return;
            isSubmitting = true;

            messageBox.innerHTML = "&nbsp;";
            const data = new FormData(form);
            data.append("action", "edit");

            try {
                const response = await fetch("index.php", { method: "POST", body: data });
                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.error || "An unknown error occurred.");
                }
                
                // On success, update the profile details on the main page
                if (result.success && result.userData) {
                    document.getElementById("first-name").textContent = result.userData.first_name;
                    document.getElementById("last-name").textContent = result.userData.last_name;
                    document.getElementById("username").textContent = result.userData.username;
                    document.getElementById("email").textContent = result.userData.email;

                    // Show success message and close modal
                    messageBox.style.color = "green";
                    messageBox.innerHTML = "Profile updated successfully!";
                    setTimeout(() => {
                        editModal.style.display = "none";
                        messageBox.style.color = "red"; // reset color for future errors
                    }, 2000);
                }

            } catch (error) {
                messageBox.style.color = "red";
                messageBox.innerHTML = error.message;
            } finally {
                isSubmitting = false;
            }
        });
    }

    // Initial listener for the main profile icon
    if (profileIconLink) {
        profileIconLink.addEventListener('click', (event) => {
            event.preventDefault();
            loadProfilePage();
        });
    }
});
</file>

<file path="search.php">
<?php
session_start();
if (!isset($_SESSION['user_id'])) {
    header('Location: index.html');
    exit();
}
include("./src/database.php");
include("./src/controller.php");
$controller = new Controller($conn);
$search_results = $controller->searchPlaylists();
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Αναζήτηση Λιστών</title>
    <link rel="stylesheet" href="sidenav.css" />
    <link rel="stylesheet" href="theme.css" />
    <link rel="stylesheet" href="buttons.css" />
    <link rel="stylesheet" href="profile.css" />
    <script src="theme.js"></script>
    <script src="api-call.js"></script>
    <script src="render.js"></script>
</head>
<body>
    <div class="mode-tog"></div>
    <div class="dark-mode-container"><div class="dark-mode"></div></div>

    <nav class="sidenav">
        <a href="main.php" class="logo-link"><img class="logo" src="Images/logo.png" alt="logo" /></a>
        <a href="search.php" class="logout-button"><span>Αναζήτηση</span></a>
        <a href="playlists.php" class="logout-button"><span>Οι Λίστες μου</span></a>
        <a href="#" id="logout-btn" class="logout-button"><span>ΑΠΟΣΥΝΔΕΣΗ</span></a>
    </nav>
    
    <div class="sign-container">
      <a href="#" class="profile-icon">
        <img src="Images/user-icon.png" alt="User Icon">
      </a>
    </div>

    <main class="profile-container">
        <header class="profile-header">
            <h1>Αναζήτηση</h1>
        </header>

        <section class="search-section">
            <form action="search.php" method="GET" class="search-form">
                <div class="form-row">
                    <input type="text" name="search_text" placeholder="Αναζήτηση σε τίτλους..." value="<?php echo htmlspecialchars($search_results['search_params']['search_text']); ?>">
                    <input type="text" name="user_query" placeholder="Αναζήτηση χρήστη..." value="<?php echo htmlspecialchars($search_results['search_params']['user_query']); ?>">
                </div>
                <div class="form-row">
                    <label>Ημερομηνία από:</label>
                    <input type="date" name="date_from" value="<?php echo htmlspecialchars($search_results['search_params']['date_from']); ?>">
                    <label>έως:</label>
                    <input type="date" name="date_to" value="<?php echo htmlspecialchars($search_results['search_params']['date_to']); ?>">
                </div>
                 <div class="form-row">
                    <label>Αποτελέσματα ανά σελίδα:</label>
                    <select name="results_per_page">
                        <option value="10" <?php if ($search_results['results_per_page'] == 10) echo 'selected'; ?>>10</option>
                        <option value="25" <?php if ($search_results['results_per_page'] == 25) echo 'selected'; ?>>25</option>
                    </select>
                    <button type="submit" class="buttons">Αναζήτηση</button>
                </div>
            </form>
        </section>

        <section class="results-section">
            <h2>Αποτελέσματα (<?php echo $search_results['total_results']; ?>)</h2>
            <div class="playlists-grid">
                <?php if (empty($search_results['playlists'])): ?>
                    <p>Δεν βρέθηκαν αποτελέσματα για αυτή την αναζήτηση.</p>
                <?php else: ?>
                    <?php foreach ($search_results['playlists'] as $playlist): ?>
                        <a href="view_playlist.php?id=<?php echo $playlist['id']; ?>" class="playlist-card">
                            <h3><?php echo htmlspecialchars($playlist['name']); ?></h3>
                            <p>από <?php echo htmlspecialchars($playlist['username']); ?></p>
                        </a>
                    <?php endforeach; ?>
                <?php endif; ?>
            </div>

            <?php if ($search_results['total_pages'] > 1): ?>
                <div class="pagination-controls">
                    <?php
                        // Create query string from existing search params
                        $query_params = $search_results['search_params'];
                        $query_params['results_per_page'] = $search_results['results_per_page'];
                    ?>
                    <?php if ($search_results['page'] > 1): ?>
                        <a href="?page=<?php echo $search_results['page'] - 1; ?>&<?php echo http_build_query($query_params); ?>" class="buttons">Προηγούμενη</a>
                    <?php endif; ?>

                    <span>Σελίδα <?php echo $search_results['page']; ?> από <?php echo $search_results['total_pages']; ?></span>

                    <?php if ($search_results['page'] < $search_results['total_pages']): ?>
                        <a href="?page=<?php echo $search_results['page'] + 1; ?>&<?php echo http_build_query($query_params); ?>" class="buttons">Επόμενη</a>
                    <?php endif; ?>
                </div>
            <?php endif; ?>
        </section>
    </main>

</body>
</html>
</file>

<file path="sidenav.css">
.sidenav {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  height: 100%;
  width: 220px;
  position: fixed;
  z-index: 1;
  top: 0;
  left: 0;
  background-color: #000000;
  border-right: 1px solid;
  overflow-x: hidden;
  z-index: 1;
}

.logo-link {
    width: 70%;
}

.logo {
  margin-top: 10px;
  scale: 1;
  width: 100%;
}

.logout-button {
  color: white;
  padding: 15px;
  text-decoration: none;
  font-size: 18px;
  font-weight: 500;
  width: 100%;
  text-align: center;
  margin-bottom: 20px;
  transition: color 0.3s;
  cursor: pointer;
}

.logout-button:hover {
    color: red;
}
</file>

<file path="src/controller.php">
<?php
class Controller
{
    private $requestMethod;

    private $connection;

    function __construct($conn) {
        $this->connection = $conn;
    }

    public function login()
    {
        $username = $this->validate("username", true);
        $password = $this->validate("password", true);
        $remember_me = $this->validate("remember-me");

        $stmt = $this->connection->prepare("SELECT * FROM user_data WHERE username = ? AND BINARY(password) = ?");
        if (!$stmt) {
            throw new Exception($this->connection->error);
        }
        $stmt->bind_param("ss", $username, $password);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($row = $result->fetch_assoc()) {

            $_SESSION['user_id'] = $row['id'];
            $_SESSION['username'] = $row['username'];

            if ($remember_me) {
                setcookie("username", $row['username'], time() + (86400 * 30), "/");
            }
            
            return ['redirect' => 'main.php'];
            
        } else {
            throw new Exception("User not found.");
        }
    }

    function register() {
        $first_name = $this->validate("firstname", true);
        $last_name = $this->validate("lastname", true);
        $username= $this->validate("username", true);
        $email = $this->validate("email", true);
        $password = $this->validate("password", true);

        $sql = "INSERT INTO user_data (first_name, last_name, username, email, password)
                VALUES (?, ?, ?, ?, ?)";

        $stmt = mysqli_stmt_init($this->connection);

        if (!mysqli_stmt_prepare($stmt, $sql)) {
            throw new Exception(mysqli_error($this->connection));
        }

        mysqli_stmt_bind_param($stmt, "sssss",
                            $first_name,
                            $last_name,
                            $username,
                            $email,
                            $password);

        if (!mysqli_stmt_execute($stmt)) {
            throw new Exception($this->connection->error);
        }
 
        return ['closeModal' => 'true'];
    }

    public function getUser() {
        if (!isset($_SESSION['user_id'])) {
            throw new Exception("Not logged in.");
        }

        $id = $_SESSION['user_id'];
        $stmt = $this->connection->prepare("SELECT first_name, last_name, username, email FROM user_data WHERE id = ?");
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($row = $result->fetch_assoc()) {
            return $row;
        } else {
            throw new Exception("User not found.");
        }
    }

    public function edit() {
        if (!isset($_SESSION['user_id'])) {
            throw new Exception("Not logged in.");
        }
    
        $id = $_SESSION['user_id'];
        $first_name = $this->validate("firstname", true);
        $last_name  = $this->validate("lastname", true);
        $username   = $this->validate("username", true);
        $email      = $this->validate("email", true);
        $password   = $this->validate("password"); // Password is now optional
    
        // Check if username is already taken by ANOTHER user
        $stmt = $this->connection->prepare("SELECT id FROM user_data WHERE username = ? AND id != ?");
        if (!$stmt) { throw new Exception($this->connection->error); }
        $stmt->bind_param("si", $username, $id);
        $stmt->execute();
        if ($stmt->get_result()->num_rows > 0) {
            throw new Exception("Το όνομα χρήστη υπάρχει ήδη.");
        }
    
        // Check if email is already taken by ANOTHER user
        $stmt = $this->connection->prepare("SELECT id FROM user_data WHERE email = ? AND id != ?");
        if (!$stmt) { throw new Exception($this->connection->error); }
        $stmt->bind_param("si", $email, $id);
        $stmt->execute();
        if ($stmt->get_result()->num_rows > 0) {
            throw new Exception("Το email χρησιμοποιείται ήδη.");
        }
    
        if (!empty($password)) {
            // If password is provided, update it along with other fields
            $sql = "UPDATE user_data 
                    SET first_name = ?, last_name = ?, username = ?, email = ?, password = ?
                    WHERE id = ?";
            $stmt = $this->connection->prepare($sql);
            if (!$stmt) { throw new Exception($this->connection->error); }
            $stmt->bind_param("sssssi", $first_name, $last_name, $username, $email, $password, $id);
        } else {
            // If password is empty, don't update it
            $sql = "UPDATE user_data 
                    SET first_name = ?, last_name = ?, username = ?, email = ?
                    WHERE id = ?";
            $stmt = $this->connection->prepare($sql);
            if (!$stmt) { throw new Exception($this->connection->error); }
            $stmt->bind_param("ssssi", $first_name, $last_name, $username, $email, $id);
        }
    
        if (!$stmt->execute()) {
            throw new Exception($this->connection->error);
        }
        
        // Return a success response with the updated data
        return [
            "success" => true,
            "userData" => [
                "first_name" => $first_name,
                "last_name" => $last_name,
                "username" => $username,
                "email" => $email
            ]
        ];
    }
    
    // Δημιουργεί μια νέα λίστα αναπαραγωγής για τον συνδεδεμένο χρήστη.
    public function createPlaylist() {
        if (!isset($_SESSION['user_id'])) {
            throw new Exception("Δεν είστε συνδεδεμένος.");
        }
        $user_id = $_SESSION['user_id'];
        $playlist_name = $this->validate("playlist_name", true);

        $sql = "INSERT INTO playlists (user_id, name) VALUES (?, ?)";
        $stmt = $this->connection->prepare($sql);
        if (!$stmt) { throw new Exception($this->connection->error); }
        $stmt->bind_param("is", $user_id, $playlist_name);
        if (!$stmt->execute()) {
            throw new Exception($this->connection->error);
        }
        return ['success' => true, 'message' => 'Η λίστα δημιουργήθηκε με επιτυχία.'];
    }

    // Προσθέτει ένα βίντεο από το YouTube σε μια υπάρχουσα λίστα.
    public function addVideoToPlaylist() {
        if (!isset($_SESSION['user_id'])) {
            throw new Exception("Δεν είστε συνδεδεμένος.");
        }
        $user_id = $_SESSION['user_id'];
        $playlist_id = $this->validate("playlist_id", true);
        $video_title = $this->validate("video_title", true);
        $video_url = $this->validate("video_url", true);

        // Απομονώνει το ID του βίντεο από το URL του YouTube.
        preg_match("/^(?:http(?:s)?:\/\/)?(?:www\.)?(?:m\.)?(?:youtu\.be\/|youtube\.com\/(?:(?:watch)?\?(?:.*&)?v(?:i)?=|(?:embed|v|vi|user)\/))([^\?&\"'>]+)/", $video_url, $matches);
        $video_id = $matches[1] ?? null;

        if (!$video_id) {
            throw new Exception("Μη έγκυρο YouTube URL. Παρακαλώ χρησιμοποιήστε τη μορφή https://www.youtube.com/watch?v=...");
        }

        $sql = "INSERT INTO playlist_videos (playlist_id, user_id, video_title, video_id) VALUES (?, ?, ?, ?)";
        $stmt = $this->connection->prepare($sql);
        if (!$stmt) { throw new Exception($this->connection->error); }
        $stmt->bind_param("iiss", $playlist_id, $user_id, $video_title, $video_id);

        if (!$stmt->execute()) {
            throw new Exception($this->connection->error);
        }
        return ['success' => true, 'message' => 'Το βίντεο προστέθηκε με επιτυχία.'];
    }

    // Επιστρέφει όλες τις λίστες που έχει δημιουργήσει ο τρέχων χρήστης.
    public function getMyPlaylists() {
        if (!isset($_SESSION['user_id'])) {
            throw new Exception("Δεν είστε συνδεδεμένος.");
        }
        $user_id = $_SESSION['user_id'];
        $stmt = $this->connection->prepare("SELECT id, name FROM playlists WHERE user_id = ? ORDER BY created_at DESC");
        $stmt->bind_param("i", $user_id);
        $stmt->execute();
        $result = $stmt->get_result();
        $playlists = [];
        while ($row = $result->fetch_assoc()) {
            $playlists[] = $row;
        }
        return $playlists;
    }

    // Επιστρέφει λίστες από το feed του χρήστη (δικές του και όσων ακολουθεί).
    public function getFeedPlaylists() {
        if (!isset($_SESSION['user_id'])) {
            throw new Exception("Δεν είστε συνδεδεμένος.");
        }
        $user_id = $_SESSION['user_id'];
        
        $sql = "
            SELECT p.id, p.name, u.username 
            FROM playlists p
            JOIN user_data u ON p.user_id = u.id
            WHERE p.user_id = ? 
            OR p.user_id IN (SELECT following_id FROM user_follows WHERE follower_id = ?)
            ORDER BY p.created_at DESC
        ";
        
        $stmt = $this->connection->prepare($sql);
        $stmt->bind_param("ii", $user_id, $user_id);
        $stmt->execute();
        $result = $stmt->get_result();
        $playlists = [];
        while ($row = $result->fetch_assoc()) {
            $playlists[] = $row;
        }
        return $playlists;
    }

    // Επιστρέφει τις λεπτομέρειες και τα βίντεο μιας συγκεκριμένης λίστας.
    public function getPlaylistDetails() {
        if (!isset($_SESSION['user_id'])) {
            throw new Exception("Δεν είστε συνδεδεμένος.");
        }
        
        if (!isset($_GET['id'])) {
            throw new Exception("Δεν δόθηκε ID λίστας.");
        }
        $playlist_id = filter_var($_GET['id'], FILTER_VALIDATE_INT);
        if (!$playlist_id) {
            throw new Exception("Μη έγκυρο ID λίστας.");
        }

        $stmt = $this->connection->prepare("SELECT p.name, u.username FROM playlists p JOIN user_data u ON p.user_id = u.id WHERE p.id = ?");
        $stmt->bind_param("i", $playlist_id);
        $stmt->execute();
        $playlist_info = $stmt->get_result()->fetch_assoc();
        if (!$playlist_info) {
            throw new Exception("Η λίστα δεν βρέθηκε.");
        }

        $stmt = $this->connection->prepare("
            SELECT pv.video_title, pv.video_id, pv.added_at, u.username 
            FROM playlist_videos pv
            JOIN user_data u ON pv.user_id = u.id
            WHERE pv.playlist_id = ? 
            ORDER BY pv.added_at ASC
        ");
        $stmt->bind_param("i", $playlist_id);
        $stmt->execute();
        $result = $stmt->get_result();
        $videos = [];
        while ($row = $result->fetch_assoc()) {
            $videos[] = $row;
        }

        return ['info' => $playlist_info, 'videos' => $videos];
    }
    
    // Επιστρέφει όλες τις λίστες από όλους τους χρήστες στη βάση δεδομένων.
    public function getAllPlaylists() {
        if (!isset($_SESSION['user_id'])) {
            throw new Exception("Δεν είστε συνδεδεμένος.");
        }
        
        $sql = "
            SELECT p.id, p.name, u.username 
            FROM playlists p
            JOIN user_data u ON p.user_id = u.id
            ORDER BY p.created_at DESC
        ";
        
        $stmt = $this->connection->prepare($sql);
        $stmt->execute();
        $result = $stmt->get_result();
        $playlists = [];
        while ($row = $result->fetch_assoc()) {
            $playlists[] = $row;
        }
        return $playlists;
    }
    
    // Χειρίζεται την αναζήτηση λιστών με βάση διάφορα κριτήρια και σελιδοποίηση.
    public function searchPlaylists() {
        if (!isset($_SESSION['user_id'])) {
            throw new Exception("Δεν είστε συνδεδεμένος.");
        }

        $search_text = filter_input(INPUT_GET, 'search_text', FILTER_SANITIZE_STRING) ?: '';
        $date_from = filter_input(INPUT_GET, 'date_from', FILTER_SANITIZE_STRING) ?: '';
        $date_to = filter_input(INPUT_GET, 'date_to', FILTER_SANITIZE_STRING) ?: '';
        $user_query = filter_input(INPUT_GET, 'user_query', FILTER_SANITIZE_STRING) ?: '';
        $page = filter_input(INPUT_GET, 'page', FILTER_VALIDATE_INT, ['options' => ['default' => 1, 'min_range' => 1]]);
        $results_per_page = filter_input(INPUT_GET, 'results_per_page', FILTER_VALIDATE_INT) ?: 10;
        if (!in_array($results_per_page, [10, 25])) {
            $results_per_page = 10;
        }
        $offset = ($page - 1) * $results_per_page;

        $params = [];
        $param_types = '';
        $base_sql = "
            FROM playlists p
            JOIN user_data u ON p.user_id = u.id
            LEFT JOIN playlist_videos pv ON p.id = pv.playlist_id
        ";
        $where_clauses = [];

        if (!empty($search_text)) {
            $where_clauses[] = "(p.name LIKE ? OR pv.video_title LIKE ?)";
            $search_text_like = '%' . $search_text . '%';
            array_push($params, $search_text_like, $search_text_like);
            $param_types .= 'ss';
        }
        if (!empty($date_from)) {
            $where_clauses[] = "p.created_at >= ?";
            $params[] = $date_from;
            $param_types .= 's';
        }
        if (!empty($date_to)) {
            $where_clauses[] = "p.created_at <= ?";
            $params[] = $date_to . ' 23:59:59';
            $param_types .= 's';
        }
        if (!empty($user_query)) {
            $where_clauses[] = "(u.first_name LIKE ? OR u.last_name LIKE ? OR u.username LIKE ? OR u.email LIKE ?)";
            $user_query_like = '%' . $user_query . '%';
            array_push($params, $user_query_like, $user_query_like, $user_query_like, $user_query_like);
            $param_types .= 'ssss';
        }

        $where_sql = count($where_clauses) > 0 ? " WHERE " . implode(' AND ', $where_clauses) : '';

        $count_sql = "SELECT COUNT(DISTINCT p.id) as total " . $base_sql . $where_sql;
        $stmt = $this->connection->prepare($count_sql);
        if (!empty($param_types)) {
            $stmt->bind_param($param_types, ...$params);
        }
        $stmt->execute();
        $total_results = $stmt->get_result()->fetch_assoc()['total'] ?? 0;
        $total_pages = ceil($total_results / $results_per_page);

        $results_sql = "
            SELECT DISTINCT p.id, p.name, u.username
            " . $base_sql . $where_sql . "
            ORDER BY p.created_at DESC
            LIMIT ? OFFSET ?
        ";
        array_push($params, $results_per_page, $offset);
        $param_types .= 'ii';

        $stmt = $this->connection->prepare($results_sql);
         if (!empty($param_types)) {
            $stmt->bind_param($param_types, ...$params);
        }
        $stmt->execute();
        $result = $stmt->get_result();
        $playlists = [];
        while ($row = $result->fetch_assoc()) {
            $playlists[] = $row;
        }

        return [
            'playlists' => $playlists,
            'page' => $page,
            'total_pages' => (int)$total_pages,
            'total_results' => (int)$total_results,
            'results_per_page' => $results_per_page,
            'search_params' => [
                'search_text' => $search_text,
                'date_from' => $date_from,
                'date_to' => $date_to,
                'user_query' => $user_query,
            ]
        ];
    }

    public function logout() {
        session_unset();
        session_destroy();
        return ['redirect' => 'index.html'];
    }

    function validate($input, $mandatory=false) {
        if ($mandatory == true && empty($_POST[$input])) {
            throw new Exception('Όλα τα πεδία είναι υποχρεωτικά!');
        }

        return htmlspecialchars(stripcslashes($_POST[$input] ?? ''));
    }

    public function getRequestMethod() {
        return $this->requestMethod;
    }

    public function setRequestMethod(string $methodName) {
        if ($methodName === '') {
            throw new Exception('RequestMethod cannot be empty.');
        }

        $this->requestMethod = $methodName;
    }

    public function render($file){
        if (file_exists($file)) {
            ob_start();
            echo include($file);
            ob_flush();
            ob_end_clean();
        }
    }
}
</file>

<file path="src/database.php">
<?php 
$host = "localhost";
$port = 3306; // default XAMPP MySQL port
$dbname = "texnologies_diadiktiou_db";
$db_username = "root";
$db_password = ""; // XAMPP default is empty

    $conn = mysqli_connect($host, $db_username, $db_password, $dbname, $port);

    if (mysqli_connect_errno()) {
        die("Connection error: " . mysqli_connect_error());
    }
</file>

<file path="src/googleauth.php">
<?php

class GoogleAuth
{
    private Google\Client $client;
    private Google\Service\YouTube $youtubeService;

    function __construct()
    {
        $this->client = new Google\Client();
        $this->client->setApplicationName("Client_Library_Examples");
        $this->client->setDeveloperKey("YOUR_APP_KEY");
        $this->youtubeService = new Google\Service\Youtube($this->client);
    }

    function auth()
    {
        session_start();
        $this->client->setAuthConfig('client_secrets.json');
        $this->client->addScope(Google\Service\Youtube::YOUTUBE_READONLY);

        if (isset($_SESSION['access_token']) && $_SESSION['access_token']) {
            $this->downloadFeed();
        } else {
            $redirect_uri = 'http://' . $_SERVER['HTTP_HOST'] . '/oauth2callback.php';
            header('Location: ' . filter_var($redirect_uri, FILTER_SANITIZE_URL));
        }
        session_write_close();
    }

    function authCallback($code)
    {
        session_start();
        if (!isset($code)) {
            $auth_url = $this->client->createAuthUrl();
            header('Location: ' . filter_var($auth_url, FILTER_SANITIZE_URL));
        } else {
            $this->client->authenticate($code);
            $_SESSION['access_token'] = $this->client->getAccessToken();
            $redirect_uri = 'http://' . $_SERVER['HTTP_HOST'] . '/';
            header('Location: ' . filter_var($redirect_uri, FILTER_SANITIZE_URL));
        }
        session_write_close();
    }

    function downloadFeed()
    {
        
    }
}
</file>

<file path="theme.css">
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Roboto', sans-serif;
}

body, html {
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    background-color: white;
    color: black;
    transition: background-color 2s, color 1s;
}

body.dark {
    background-color: rgb(0, 0, 0);
    color: rgb(255, 255, 255);
    z-index: 0;
}

.try-me {
    position: absolute;
    right: 105px;
    bottom: 110px;
    font-weight: 900;
}

.try-me-arrow {
    position: absolute;
    right: 48px;
    bottom: 60px;
    font-size: 50px;
}

.mode-tog {
    background-color: black;
    position: absolute;
    right: 50px;
    bottom: 40px;
    cursor: pointer;
    width: 20px;
    height: 20px;
    z-index: 3;
    transition: 1000ms;
    border-radius: 50%;

    animation: pulse-scale 2s infinite ease-in-out;
}

.mode-tog.active {
    background-color: white;
}

@keyframes pulse-scale {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.5);
  }
  100% {
    transform: scale(1);
  }
}

.dark-mode-container {
    position: fixed;
    display: flex;
    justify-content: center;
    align-items: center;
    right: 50px;
    bottom: 40px;
    width: 20px;
    height: 20px;
}

.dark-mode {
    position: relative;
    transform: scale(0);
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    width: 250vw;
    height: 250vw;
    border-radius: 50%;
    background-color: #000000;
    transition: 1000ms ease-in-out;
    display: flex;
    flex: 0 0 auto;
    z-index: 0;
}

.dark-mode.active {
    transform: scale(1);
}

.dark-mode.no-transition {
    transition: none !important;
}

h1 {
    position: relative;
    z-index: 1; 
}

.accordion-container, .wrapper-main {
    position: relative;
    z-index: 1; 
}

h1 {
    color: white;
    mix-blend-mode: difference;
    position: absolute;
    left: 35%;
    top: 40%;
}

@media (max-width: 600px) {
    .dark-mode {
        width: 250vh;
        height: 250vh;
    }
}
</file>

<file path="theme.js">
function initTheme() {
    const modeToggle = document.querySelector('.mode-tog');
    const darkMode = document.querySelector('.dark-mode');

    if (!modeToggle || !darkMode) {
        console.warn("Theme toggle elements not found.");
        return;
    }

    const applyTheme = (theme) => {
        const isDark = theme === 'dark';
        darkMode.classList.toggle('active', isDark);
        modeToggle.classList.toggle('active', isDark);
        document.body.classList.toggle('dark', isDark);
    };

    const toggleTheme = () => {
        const isDark = !document.body.classList.contains('dark');
        localStorage.setItem('mode', isDark ? 'dark' : 'light');
        applyTheme(isDark ? 'dark' : 'light');
    };

    // Apply saved theme on initialization, preventing a flash of incorrect theme
    const savedMode = localStorage.getItem('mode');
    if (savedMode) {
        darkMode.classList.add('no-transition');
        applyTheme(savedMode);
        // Use requestAnimationFrame to remove the transition override after the first paint
        requestAnimationFrame(() => {
            darkMode.classList.remove('no-transition');
        });
    }

    // Ensure the event listener is attached only once to prevent issues.
    if (!modeToggle.dataset.themeInitialized) {
        modeToggle.addEventListener('click', toggleTheme);
        modeToggle.dataset.themeInitialized = 'true';
    }
}

// Run the theme initializer as soon as the DOM is interactive or already complete.
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTheme);
} else {
    initTheme();
}
</file>

<file path="view_playlist.php">
<?php
session_start();
if (!isset($_SESSION['user_id'])) {
    header('Location: index.html');
    exit();
}
include("./src/database.php");
include("./src/controller.php");
$controller = new Controller($conn);

try {
    $playlist_data = $controller->getPlaylistDetails();
    $info = $playlist_data['info'];
    $videos = $playlist_data['videos'];
    $video_ids = array_map(function($v) { return $v['video_id']; }, $videos);
} catch (Exception $e) {
    die("Error: " . $e->getMessage());
}
?>
<!DOCTYPE html>
<html lang="el">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><?php echo htmlspecialchars($info['name']); ?></title>
    <link rel="stylesheet" href="sidenav.css" />
    <link rel="stylesheet" href="theme.css" />
    <link rel="stylesheet" href="buttons.css" />
    <link rel="stylesheet" href="profile.css" />
    <script src="theme.js"></script>
  </head>
  <body>
    
    <div class="mode-tog"></div>
    <div class="dark-mode-container"><div class="dark-mode"></div></div>

    <nav class="sidenav">
      <a href="index.html" class="logo-link">
        <img class="logo" src="Images/logo.png" alt="logo" />
      </a>
      <a href="playlists.php" class="logout-button"><span>Οι Λίστες μου</span></a>
      <a href="#" id="logout-btn" class="logout-button"><span>ΑΠΟΣΥΝΔΕΣΗ</span></a>
    </nav>

    <main class="profile-container">
        <header class="profile-header">
            <div>
                <h1><?php echo htmlspecialchars($info['name']); ?></h1>
                <p style="margin-top: 5px;">Λίστα από: <?php echo htmlspecialchars($info['username']); ?></p>
            </div>
        </header>

        <?php if (!empty($video_ids)): ?>
            <section class="playlist-player-section">
                <div id="player"></div>
            </section>
        <?php endif; ?>

        <section class="user-feeds">
            <h2>Βίντεο στη Λίστα</h2>
            <?php if (empty($videos)): ?>
                <p>Αυτή η λίστα δεν έχει βίντεο ακόμα.</p>
            <?php else: ?>
                <ul class="video-list">
                    <?php foreach ($videos as $index => $video): ?>
                        <li onclick="playVideo(<?php echo $index; ?>)">
                            <strong><?php echo htmlspecialchars($video['video_title']); ?></strong>
                            <small>(Προστέθηκε από <?php echo htmlspecialchars($video['username']); ?> στις <?php echo date('d/m/Y H:i', strtotime($video['added_at'])); ?>)</small>
                        </li>
                    <?php endforeach; ?>
                </ul>
            <?php endif; ?>
        </section>
    </main>
    
    <script>
        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        var player;
        var videoIds = <?php echo json_encode($video_ids); ?>;
        
        function onYouTubeIframeAPIReady() {
            if (videoIds.length > 0) {
                player = new YT.Player('player', {
                    height: '480',
                    width: '100%',
                    playerVars: {
                        'playsinline': 1
                    },
                    events: {
                        'onReady': onPlayerReady
                    }
                });
            }
        }

        function onPlayerReady(event) {
            // Φορτώνουμε την playlist όταν ο player είναι έτοιμος
            event.target.cuePlaylist(videoIds);
        }

        function playVideo(index) {
            if (player && typeof player.playVideoAt === 'function') {
                player.playVideoAt(index);
                // Κάνουμε scroll στον player για καλύτερη εμπειρία χρήστη
                document.getElementById('player').scrollIntoView({ behavior: 'smooth' });
            }
        }
    </script>
  </body>
</html>
</file>

</files>
